Instructions for Replit Assistant: Build an Advanced Bookmark Management System

1. Initialize Project Structure:
Create the following directory structure:
/
├── src/
│   ├── components/
│   │   ├── atoms/       # Basic UI components
│   │   ├── molecules/   # Compound components
│   │   ├── organisms/   # Complex components
│   │   └── pages/       # Full pages
│   ├── services/        # API services
│   ├── store/           # State management
│   ├── types/          # TypeScript definitions
│   └── utils/          # Helper functions
├── server/
│   ├── middleware/     # Auth middleware
│   ├── models/        # Data models
│   └── routes/        # API endpoints
└── public/           # Static assets

2. Setup Core Dependencies:
Install these packages:
- react
- react-dom
- express
- @replit/database
- tailwindcss
- typescript
- @types/react
- @types/react-dom
- @vitejs/plugin-react
- vite

3. Configure Files:

package.json configuration:
{
  "name": "bookmark-manager",
  "private": true,
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "build": "tsc && vite build",
    "start": "node server.js",
    "dev": "npm run build && npm start"
  }
}

.replit configuration:
run = "npm run dev"
entrypoint = "src/main.tsx"

[[ports]]
localPort = 3000
externalPort = 443

[[ports]]
localPort = 5173
externalPort = 80

4. Implementation Phases:

Phase 1: Core Features
- Setup Express server
- Implement Replit DB integration
- Create basic CRUD operations
- Add authentication using Replit Auth

Phase 2: Enhanced Features
- Implement tag system
- Add collections
- Create search functionality
- Add offline support

Phase 3: Premium Features
- Integrate Replit AI for content analysis
- Add analytics dashboard
- Implement backup system

5. Data Models:

Bookmark Schema:
{
  id: string;
  url: string;
  title: string;
  description?: string;
  tags: string[];
  collections: string[];
  userId: string;
  dateAdded: Date;
  analysis?: {
    summary?: string;
    credibilityScore?: number;
  }
}

User Schema:
{
  id: string;
  name: string;
  isPremium: boolean;
  preferences: {
    theme: string;
    defaultView: string;
  }
}

6. API Endpoints:

Core Routes:
GET    /api/bookmarks     # List bookmarks
POST   /api/bookmarks     # Create bookmark
PUT    /api/bookmarks/:id # Update bookmark
DELETE /api/bookmarks/:id # Delete bookmark
POST   /api/ai/analyze   # AI analysis
GET    /api/backup       # Backup data

7. Development Guidelines:
- Use TypeScript for type safety
- Implement error boundaries
- Add loading states
- Use proper error handling
- Follow React best practices

8. Performance Considerations:
- Implement pagination for bookmark lists
- Use proper caching
- Optimize images and assets
- Minimize bundle size

Copy these instructions and paste them to Replit Assistant when creating a new project. The assistant will help implement each component according to these specifications, ensuring Replit compatibility and best practices.