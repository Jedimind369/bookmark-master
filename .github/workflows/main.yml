name: Bookmark Manager CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install Python dependencies
        working-directory: ./processor
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './webapp/package-lock.json'

      - name: Install Node.js dependencies
        working-directory: ./webapp
        run: npm ci

      - name: Run Python tests
        working-directory: ./processor
        run: pytest --cov=. --cov-report=xml

      - name: Run Node.js tests
        working-directory: ./webapp
        run: npm test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./processor/coverage.xml,./webapp/coverage/coverage-final.json

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install Python linting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pylint black isort

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './webapp/package-lock.json'

      - name: Install Node.js linting dependencies
        working-directory: ./webapp
        run: npm ci

      - name: Lint Python code
        run: |
          flake8 processor
          pylint processor
          black --check processor
          isort --check processor

      - name: Lint TypeScript code
        working-directory: ./webapp
        run: npm run lint

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install security scanning tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './webapp/package-lock.json'

      - name: Scan Python code
        run: |
          bandit -r processor
          safety check -r processor/requirements.txt

      - name: Scan Node.js dependencies
        working-directory: ./webapp
        run: npm audit

      - name: Run Docker security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Create test data directory
        run: mkdir -p test-data
      
      - name: Generate test bookmarks
        run: |
          cat > test-data/sample_bookmarks.json << EOF
          [
            {"url": "https://example.com", "title": "Example Website"},
            {"url": "https://test.org", "title": "Test Organization"}
          ]
          EOF
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Run E2E tests in Docker
        run: |
          docker-compose -f docker-compose.e2e.yml up --build --exit-code-from e2e
      
      - name: Upload Cypress results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: cypress-results
          path: cypress-results
          retention-days: 5

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint, security, e2e-tests]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push processor
        uses: docker/build-push-action@v4
        with:
          context: ./processor
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/bookmark-processor:${{ github.sha }},${{ secrets.DOCKERHUB_USERNAME }}/bookmark-processor:latest

      - name: Build and push webapp
        uses: docker/build-push-action@v4
        with:
          context: ./webapp
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/bookmark-webapp:${{ github.sha }},${{ secrets.DOCKERHUB_USERNAME }}/bookmark-webapp:latest

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}

      - name: Deploy to production
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            cd ${{ secrets.DEPLOY_PATH }}
            docker-compose pull
            docker-compose down
            docker-compose up -d
            echo "Deployment completed successfully"
          EOF 