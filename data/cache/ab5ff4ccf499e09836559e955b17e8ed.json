{"url": "https://docs.python.org/3/library/asyncio.html", "title": "asyncio â Asynchronous I/O â Python 3.13.2 documentation", "description": "Hello World!: asyncio is a library to write concurrent code using the async/await syntax. asyncio is used as a foundation for multiple Python asynchronous frameworks that provide high-performance n...", "article_text": "dev (3.14) 3.13.2 3.12 3.11 3.10 3.9 3.8 3.7 3.6 3.5 3.4 3.3 3.2 3.1 3.0 2.7 2.6 English Spanish | espaÃ±ol French | franÃ§ais Italian | italiano Japanese | æ¥æ¬èª Korean | íêµ­ì´ Polish | polski Brazilian Portuguese | PortuguÃªs brasileiro Turkish | TÃ¼rkÃ§e Simplified Chinese | ç®ä½ä¸­æ Traditional Chinese | ç¹é«ä¸­æ Theme Auto Light Dark Previous topic Networking and Interprocess Communication Next topic Runners This Page Report a Bug Show Source Navigation index modules | next | previous | Python Â» English Spanish | espaÃ±ol French | franÃ§ais Italian | italiano Japanese | æ¥æ¬èª Korean | íêµ­ì´ Polish | polski Brazilian Portuguese | PortuguÃªs brasileiro Turkish | TÃ¼rkÃ§e Simplified Chinese | ç®ä½ä¸­æ Traditional Chinese | ç¹é«ä¸­æ dev (3.14) 3.13.2 3.12 3.11 3.10 3.9 3.8 3.7 3.6 3.5 3.4 3.3 3.2 3.1 3.0 2.7 2.6 3.13.2 Documentation Â» The Python Standard Library Â» Networking and Interprocess Communication Â» asyncio â Asynchronous I/O | Theme Auto Light Dark | asyncio â Asynchronous I/O Â¶ Hello World! import asyncio async def main (): print ( 'Hello ...' ) await asyncio . sleep ( 1 ) print ( '... World!' ) asyncio . run ( main ()) asyncio is a library to write concurrent code using\nthe async/await syntax. asyncio is used as a foundation for multiple Python asynchronous\nframeworks that provide high-performance network and web-servers,\ndatabase connection libraries, distributed task queues, etc. asyncio is often a perfect fit for IO-bound and high-level structured network code. asyncio provides a set of high-level APIs to: run Python coroutines concurrently and\nhave full control over their execution; perform network IO and IPC ; control subprocesses ; distribute tasks via queues ; synchronize concurrent code; Additionally, there are low-level APIs for library and framework developers to: create and manage event loops , which\nprovide asynchronous APIs for networking ,\nrunning subprocesses ,\nhandling OS signals , etc; implement efficient protocols using transports ; bridge callback-based libraries and code\nwith async/await syntax. Availability : not WASI. This module does not work or is not available on WebAssembly. See WebAssembly platforms for more information. asyncio REPL You can experiment with an asyncio concurrent context in the REPL : >>> $ python -m asyncio asyncio REPL ... Use \"await\" directly instead of \"asyncio.run()\". Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> import asyncio >>> await asyncio . sleep ( 10 , result = 'hello' ) 'hello' Raises an auditing event cpython.run_stdin with no arguments. Changed in version 3.12.5: (also 3.11.10, 3.10.15, 3.9.20, and 3.8.20)\nEmits audit events. Changed in version 3.13: Uses PyREPL if possible, in which case PYTHONSTARTUP is\nalso executed. Emits audit events. Reference High-level APIs Runners Coroutines and Tasks Streams Synchronization Primitives Subprocesses Queues Exceptions Low-level APIs Event Loop Futures Transports and Protocols Policies Platform Support Extending Guides and Tutorials High-level API Index Low-level API Index Developing with asyncio Note The source code for asyncio can be found in Lib/asyncio/ . Previous topic Networking and Interprocess Communication Next topic Runners This Page Report a Bug Show Source Â« Navigation index modules | next | previous | Python Â» English Spanish | espaÃ±ol French | franÃ§ais Italian | italiano Japanese | æ¥æ¬èª Korean | íêµ­ì´ Polish | polski Brazilian Portuguese | PortuguÃªs brasileiro Turkish | TÃ¼rkÃ§e Simplified Chinese | ç®ä½ä¸­æ Traditional Chinese | ç¹é«ä¸­æ dev (3.14) 3.13.2 3.12 3.11 3.10 3.9 3.8 3.7 3.6 3.5 3.4 3.3 3.2 3.1 3.0 2.7 2.6 3.13.2 Documentation Â» The Python Standard Library Â» Networking and Interprocess Communication Â» asyncio â Asynchronous I/O | Theme Auto Light Dark | Â© Copyright 2001-2025, Python Software Foundation. This page is licensed under the Python Software Foundation License Version 2. Examples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License. See History and License for more information. The Python Software Foundation is a non-profit corporation. Please donate. Last updated on Mar 09, 2025 (07:27 UTC). Found a bug ? Created using Sphinx 8.2.3.", "scrape_time": "2025-03-09T11:56:53.096305", "scraper_used": "scrapingbee"}