{"url": "https://numpy.org/", "title": "NumPy", "description": "Why NumPy? Powerful n-dimensional arrays. Numerical computing tools. Interoperable. Performant. Open source.", "article_text": "Install Documentation Learn Community About Us News Contribute English Português 日本語 (Japanese) Español NumPy The fundamental package for scientific computing with Python Latest release: NumPy 2.2. View all releases NumPy 2.2.0 released! 2024-12-08 Powerful N-dimensional arrays Fast and versatile, the NumPy vectorization, indexing, and broadcasting concepts are the de-facto standards of array computing today. Numerical computing tools NumPy offers comprehensive mathematical functions, random number generators, linear algebra routines, Fourier transforms, and more. Open source Distributed under a liberal BSD license , NumPy is developed and maintained publicly on GitHub by a vibrant, responsive, and diverse community . Interoperable NumPy supports a wide range of hardware and computing platforms, and plays well with distributed, GPU, and sparse array libraries. Performant The core of NumPy is well-optimized C code. Enjoy the flexibility of Python with the speed of compiled code. Easy to use NumPy’s high level syntax makes it accessible and productive for programmers from any background or experience level. Try NumPy Use the interactive shell to try NumPy in the browser \"\"\" To try the examples in the browser: 1. Type code in the input cell and press Shift + Enter to execute 2. Or copy paste the code, and click on the \"Run\" button in the toolbar \"\"\" # The standard way to import NumPy: import numpy as np # Create a 2-D array, set every second element in # some rows and find max per row: x = np . arange( 15 , dtype = np . int64) . reshape( 3 , 5 ) x[ 1 :, :: 2 ] = - 99 x # array([[  0,   1,   2,   3,   4], #        [-99,   6, -99,   8, -99], #        [-99,  11, -99,  13, -99]]) x . max(axis = 1 ) # array([ 4,  8, 13]) # Generate normally distributed random numbers: rng = np . random . default_rng() samples = rng . normal(size = 2500 ) samples ECOSYSTEM Scientific Domains Array Libraries Data Science Machine Learning Visualization Nearly every scientist working in Python draws on the power of NumPy. NumPy brings the computational power of languages like C and Fortran to Python, a language much easier to learn and use. With this power comes simplicity: a solution in NumPy is often clear and elegant. Quantum Computing QuTiP PyQuil Qiskit PennyLane Statistical Computing Pandas statsmodels Xarray Seaborn Signal Processing SciPy PyWavelets python-control HyperSpy Image Processing Scikit-image OpenCV Mahotas Graphs and Networks NetworkX graph-tool igraph PyGSP Astronomy AstroPy SunPy SpacePy Cognitive Psychology PsychoPy Bioinformatics BioPython Scikit-Bio PyEnsembl ETE Bayesian Inference PyStan PyMC3 ArviZ emcee Mathematical Analysis SciPy SymPy cvxpy FEniCS Chemistry Cantera MDAnalysis RDKit PyBaMM Geoscience Pangeo Simpeg ObsPy Fatiando a Terra Geographic Processing Shapely GeoPandas Folium Architecture & Engineering COMPAS City Energy Analyst Sverchok NumPy's API is the starting point when libraries are written to exploit innovative hardware, create specialized array types, or add capabilities beyond what NumPy provides. Array Library Capabilities & Application areas Dask Distributed arrays and advanced parallelism for analytics, enabling performance at scale. CuPy NumPy-compatible array library for GPU-accelerated computing with Python. JAX Composable transformations of NumPy programs: differentiate, vectorize, just-in-time compilation to GPU/TPU. Xarray Labeled, indexed multi-dimensional arrays for advanced analytics and visualization. Sparse NumPy-compatible sparse array library that integrates with Dask and SciPy's sparse linear algebra. PyTorch Deep learning framework that accelerates the path from research prototyping to production deployment. TensorFlow An end-to-end platform for machine learning to easily build and deploy ML powered applications. Arrow A cross-language development platform for columnar in-memory data and analytics. xtensor Multi-dimensional arrays with broadcasting and lazy computing for numerical analysis. Awkward Array Manipulate JSON-like data with NumPy-like idioms. uarray Python backend system that decouples API from implementation; unumpy provides a NumPy API. tensorly Tensor learning, algebra and backends to seamlessly use NumPy, PyTorch, TensorFlow or CuPy. NumPy lies at the core of a rich ecosystem of data science libraries. A typical exploratory data science workflow might look like: Extract, Transform, Load: Pandas , Intake , PyJanitor Exploratory analysis: Jupyter , Seaborn , Matplotlib , Altair Model and evaluate: scikit-learn , statsmodels , PyMC3 , spaCy Report in a dashboard: Dash , Panel , Voila For high data volumes, Dask and Ray are designed to scale. Stable deployments rely on data versioning ( DVC ), experiment tracking ( MLFlow ), and workflow automation ( Airflow , Dagster and Prefect ). Source: Google AI Blog NumPy forms the basis of powerful machine learning libraries like scikit-learn and SciPy . As machine learning grows, so does the list of libraries built on Num", "scrape_time": "2025-03-09T12:03:42.244178", "scraper_used": "scrapingbee"}